name: Auto-Fix Tagged Issue with OpenHands
on:
  issues:
    types: [labeled]  # Only trigger when label is added, not on every edit
  issue_comment:
    types: [created]
  pull_request:
    types: [labeled]

# Global concurrency to prevent OpenAI rate limiting
concurrency:
  group: openhands-global
  cancel-in-progress: false  # Queue them instead of canceling

jobs:
  resolve:
    if: |
      (github.event_name == 'issues' && contains(join(github.event.issue.labels.*.name, ','), 'fix-me')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '@openhands-agent')) ||
      (github.event_name == 'pull_request' && contains(join(github.event.pull_request.labels.*.name, ','), 'fix-me'))
    runs-on: ${{ vars.TARGET_RUNNER || 'ubuntu-latest' }}
    timeout-minutes: 60
    concurrency:
      group: openhands-resolver-${{ github.event.issue.number || github.event.pull_request.number }}
      cancel-in-progress: false  # Don't cancel, just queue them
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Run OpenHands Resolver (Docker)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # Use PAT if available, otherwise fall back to GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          SANDBOX_VOLUMES: ${{ github.workspace }}:/workspace:rw
          # LLM retry tuning per docs
          LLM_NUM_RETRIES: "4"
          LLM_RETRY_MIN_WAIT: "5"
          LLM_RETRY_MAX_WAIT: "30"
          LLM_RETRY_MULTIPLIER: "2"
        run: |
          # Debug: Check if API key is available (without exposing it)
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "ERROR: ANTHROPIC_API_KEY secret is not set"
            exit 1
          else
            echo "ANTHROPIC_API_KEY secret is available"
          fi
          
          docker run --rm --privileged --network host \
            -v ${{ github.workspace }}:/workspace \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -w /workspace \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            -e GITHUB_TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}" \
            -e GH_TOKEN="${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}" \
            -e GITHUB_REPOSITORY="${{ github.repository }}" \
            -e GITHUB_OWNER="${{ github.repository_owner }}" \
            -e GITHUB_API_URL="https://api.github.com" \
            -e LLM_MODEL="${{ vars.LLM_MODEL || 'anthropic/claude-sonnet-4-20250514' }}" \
            -e SANDBOX_VOLUMES="${{ github.workspace }}:/workspace:rw" \
            -e LLM_NUM_RETRIES="${LLM_NUM_RETRIES}" \
            -e LLM_RETRY_MIN_WAIT="${LLM_RETRY_MIN_WAIT}" \
            -e LLM_RETRY_MAX_WAIT="${LLM_RETRY_MAX_WAIT}" \
            -e LLM_RETRY_MULTIPLIER="${LLM_RETRY_MULTIPLIER}" \
            --entrypoint /bin/bash \
            ghcr.io/all-hands-ai/openhands:0.51.1 \
            -lc '
              set -e
              export DEBIAN_FRONTEND=noninteractive
              apt-get update && apt-get install -y --no-install-recommends git tmux curl > /dev/null 2>&1
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions[bot]@users.noreply.github.com"
              export TERM=xterm
              # Ensure git config works inside runtime
              # Replace system git with a wrapper to sanitize env for ALL git calls
              if [ -x /usr/bin/git ] && [ ! -x /usr/bin/git.real ]; then mv /usr/bin/git /usr/bin/git.real; fi
              echo "#!/bin/sh" > /usr/bin/git
              echo "unset GIT_CONFIG GIT_CONFIG_GLOBAL GIT_CONFIG_SYSTEM GIT_CONFIG_NOSYSTEM GIT_CONFIG_COUNT" >> /usr/bin/git
              echo "exec /usr/bin/git.real \"\$@\"" >> /usr/bin/git
              chmod +x /usr/bin/git
              unset GIT_CONFIG GIT_CONFIG_GLOBAL GIT_CONFIG_SYSTEM GIT_CONFIG_NOSYSTEM || true
              git config --global core.pager "" || true
              git config --global --add safe.directory /workspace || true
              git config --global --add safe.directory /workspace/openhands-output/repo || true
              # Fix permissions for OpenHands runtime user UID 42420 to avoid index.lock permission denied
              chown -R 42420:42420 /workspace || true
              # Only change directory permissions, not file permissions
              find /workspace -type d -exec chmod 755 {} \; 2>/dev/null || true
              # Create output directory with proper permissions
              mkdir -p /workspace/openhands-output || true
              chown -R 42420:42420 /workspace/openhands-output || true
              /app/.venv/bin/playwright install chromium > /dev/null 2>&1 || true
              /app/.venv/bin/playwright install-deps chromium > /dev/null 2>&1 || true
              
              # Debug: Check if API key is available inside container
              if [ -z "$ANTHROPIC_API_KEY" ]; then
                echo "ERROR: ANTHROPIC_API_KEY not available inside container"
                exit 1
              else
                echo "ANTHROPIC_API_KEY is available inside container"
              fi
              
                            # Ensure API key is available to all subprocesses
              export ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY}"
              export LLM_MODEL="${LLM_MODEL:-anthropic/claude-sonnet-4-20250514}"
              
              # Add a small delay to help with rate limiting when multiple runs queue up
              sleep 10
              
              # Determine issue number robustly across events
              ISSUE_NUMBER="${{ github.event.issue.number }}"
              if [ -z "${ISSUE_NUMBER}" ]; then ISSUE_NUMBER="${{ github.event.pull_request.number }}"; fi
              if [ -z "${ISSUE_NUMBER}" ]; then echo "ERROR: No issue number found in event payload"; exit 1; fi
              echo "[resolver] issue number: ${ISSUE_NUMBER}"



              # Verify issue exists via API before launching
              set +e
              curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${ISSUE_NUMBER}" | grep -q "\"number\":"
              CURL_RC=$?
              set -e
              if [ $CURL_RC -ne 0 ]; then echo "ERROR: Issue ${ISSUE_NUMBER} not found via API for ${GITHUB_REPOSITORY}"; exit 1; fi
              echo "[resolver] issue exists via API. launching resolver..."
              # Build optional instructions flag if repository provides one at root
              INSTRUCTIONS_ARGS=""
              if [ -f /workspace/.openhands_instructions ]; then
                INSTRUCTIONS_ARGS="--repo-instruction-file /workspace/.openhands_instructions"
                echo "[resolver] using custom instructions file at /workspace/.openhands_instructions"
              fi
              # Configure git for pushing - ensure proper authentication
              echo "[resolver] configuring git remote with token..."
              git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git || true
              git config --global credential.helper store || true
              echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > ~/.git-credentials || true
              
              env -i \
                OPENAI_API_KEY="${OPENAI_API_KEY}" \
                ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY}" \
                GITHUB_TOKEN="${GITHUB_TOKEN}" \
                GH_TOKEN="${GH_TOKEN}" \
                GITHUB_REPOSITORY="${GITHUB_REPOSITORY}" \
                GITHUB_OWNER="${GITHUB_OWNER}" \
                GITHUB_API_URL="${GITHUB_API_URL}" \
                LLM_MODEL="${LLM_MODEL}" \
                SANDBOX_VOLUMES="${SANDBOX_VOLUMES}" \
                PYTHONPATH="/app" \
                VIRTUAL_ENV="/app/.venv" \
                PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
                HOME="/root" \
                TERM="${TERM}" \
                AGENT_CLS="CodeActAgent" \
                /app/.venv/bin/python /app/openhands/resolver/resolve_issue.py \
                --selected-repo ${{ github.repository }} \
                --issue-number ${ISSUE_NUMBER} \
                --username ${{ github.actor }} \
                --token ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }} \
                --llm-model ${{ vars.LLM_MODEL || 'openai/gpt-4o' }} \
                --max-iterations ${{ vars.OPENHANDS_MAX_ITER || 30 }} \
                --output-dir /workspace/openhands-output \
                --runtime local \
                ${INSTRUCTIONS_ARGS}
              RES_RC=$?
              echo "[resolver] resolver exit code: ${RES_RC}"
              
              # Fail if resolver failed
              if [ ${RES_RC} -ne 0 ]; then 
                echo "[resolver] ERROR: Resolver failed with exit code ${RES_RC}"
                exit ${RES_RC}
              fi
              
              # Check if PR was created
              if ! grep -q "\"pull_request\":" /workspace/openhands-output/output.jsonl 2>/dev/null; then
                echo "[resolver] No PR detected in output. Checking if we need to create one..."
                
                # Reset file permissions to avoid including permission changes in PR
                find /workspace -type f \( -name "*.py" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" -o -name "*.txt" -o -name "*.cs" -o -name "*.csproj" -o -name "*.ts" -o -name "*.js" -o -name "*.html" -o -name "*.scss" -o -name "*.css" \) -exec chmod 644 {} \; 2>/dev/null || true
                
                # First check the main workspace where agent actually worked
                cd /workspace
                MAIN_HAS_COMMITS=false
                if git log origin/main..HEAD --oneline 2>/dev/null | grep -q .; then
                  echo "[resolver] Found commits in main workspace!"
                  MAIN_HAS_COMMITS=true
                fi
                
                # Also check the cloned repo just in case
                CLONE_HAS_COMMITS=false
                if [ -d /workspace/openhands-output/repo ]; then
                  cd /workspace/openhands-output/repo
                  if git log origin/main..HEAD --oneline 2>/dev/null | grep -q .; then
                    echo "[resolver] Found commits in cloned repo!"
                    CLONE_HAS_COMMITS=true
                  fi
                fi
                
                # Decide which repo to push from
                if [ "${MAIN_HAS_COMMITS}" = "true" ]; then
                  cd /workspace
                  echo "[resolver] Working with main workspace for PR creation"
                elif [ "${CLONE_HAS_COMMITS}" = "true" ]; then
                  cd /workspace/openhands-output/repo
                  echo "[resolver] Working with cloned repo for PR creation"
                else
                  echo "[resolver] No commits found in either location"
                  cd /workspace
                fi
                
                # Check for any commits that have not been pushed

                
                # Check if there are commits not on origin/main
                if git log origin/main..HEAD --oneline 2>/dev/null | grep -q .; then
                    echo "[resolver] Found unpushed commits. Creating PR..."
                    
                    # Remove openhands-output from git tracking if it was accidentally added
                    echo "[resolver] Removing openhands-output from git tracking..."
                    git rm -r --cached openhands-output 2>/dev/null || true
                    git reset HEAD openhands-output 2>/dev/null || true
                    
                    # Create a branch name - always create a new branch for PRs
                    BRANCH_NAME="openhands-fix-issue-${ISSUE_NUMBER}"
                    # Try to create the branch, if it fails we might already be on a branch
                    git checkout -b "${BRANCH_NAME}" 2>/dev/null || true
                    
                    # Configure git for push
                    git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
                    
                    # Push the branch
                    echo "[resolver] Pushing branch ${BRANCH_NAME}..."
                    git push -u origin "${BRANCH_NAME}" --force
                    
                    # Create PR using GitHub API
                    echo "[resolver] Creating PR via GitHub API..."
                    curl -X POST \
                      -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls \
                      -d "{
                        \"title\": \"Fix: Issue #${ISSUE_NUMBER}\",
                        \"body\": \"This PR was automatically generated by OpenHands to resolve issue #${ISSUE_NUMBER}\\n\\nCloses #${ISSUE_NUMBER}\",
                        \"head\": \"${BRANCH_NAME}\",
                        \"base\": \"main\"
                      }" | head -n 20
                    
                    echo "[resolver] PR creation completed."
                  else
                    echo "[resolver] No unpushed commits found."
                    git status || true
                  fi
              else
                echo "[resolver] SUCCESS: Pull request created!"
                # Show PR URL
                grep "\"pull_request\":" /workspace/openhands-output/output.jsonl | tail -n 1 || true
              fi
            '
