name: Simple AI Issue Resolver
on:
  issues:
    types: [labeled, opened, edited]
  issue_comment:
    types: [created]

jobs:
  resolve:
    if: |
      (github.event_name == 'issues' && contains(join(github.event.issue.labels.*.name, ','), 'fix-me')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '@ai-agent'))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install openai requests python-dotenv
          
      - name: Simple AI Resolver
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          from openai import OpenAI

          # Get issue details
          issue_number = "${{ github.event.issue.number }}"
          repo = "${{ github.repository }}"
          
          # Get issue from GitHub API
          headers = {"Authorization": f"token {os.environ['GITHUB_TOKEN']}"}
          issue_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}"
          issue_response = requests.get(issue_url, headers=headers)
          issue = issue_response.json()
          
          print(f"Processing issue #{issue_number}: {issue['title']}")
          
          # Initialize OpenAI
          client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
          
          # Create AI prompt
          prompt = f"""
          You are a senior software engineer working on a Garage Inventory Management System.
          
          **Architecture**: Angular + .NET API with Onion Architecture
          **Database**: PostgreSQL with Entity Framework Core
          **Frontend**: Angular 20 with standalone components and Angular Material
          
          **Issue to solve**:
          Title: {issue['title']}
          Description: {issue['body']}
          
          **Current project structure**:
          - Backend: .NET 9 with Onion Architecture (Domain, Application, Infrastructure, API layers)
          - Frontend: Angular 20 with standalone components
          - Database: Entity Framework Core with existing entities (User, InventoryItem, Location, Category, etc.)
          
          Please provide a complete implementation plan with:
          1. **Backend changes** (if needed):
             - Controller endpoints
             - Service layer methods
             - Repository changes
             - DTOs
          
          2. **Frontend changes** (if needed):
             - Components
             - Services
             - Templates
          
          3. **Database changes** (if needed):
             - Entity modifications
             - Migrations
          
          Format your response as a detailed implementation plan that can be followed step by step.
          Focus on the specific requirements in the issue title and description.
          """
          
          # Get AI response
          response = client.chat.completions.create(
              model="gpt-4o",
              messages=[{"role": "user", "content": prompt}],
              max_tokens=3000,
              temperature=0.1
          )
          
          ai_response = response.choices[0].message.content
          
          # Create comment on the issue
          comment_body = f"""🤖 **AI Analysis Complete**
          
          I've analyzed this issue and created an implementation plan:
          
          {ai_response}
          
          ---
          *This analysis was generated by AI. Please review and adapt as needed for your specific requirements.*
          """
          
          # Post comment
          comment_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
          comment_data = {"body": comment_body}
          
          comment_response = requests.post(comment_url, headers=headers, json=comment_data)
          
          if comment_response.status_code == 201:
              print("✅ AI analysis posted successfully!")
          else:
              print(f"❌ Failed to post comment: {comment_response.status_code}")
              print(comment_response.text)
          EOF
