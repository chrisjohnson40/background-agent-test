name: AI Code Generator
on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  generate-code:
    if: |
      (github.event_name == 'issues' && contains(join(github.event.issue.labels.*.name, ','), 'ai-generate')) ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '@ai-generate'))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install openai requests python-dotenv
          
      - name: Generate Code with AI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          import subprocess
          from openai import OpenAI

          # Get issue details
          issue_number = "${{ github.event.issue.number }}"
          repo = "${{ github.repository }}"
          
          # Get issue from GitHub API
          headers = {"Authorization": f"token {os.environ['GITHUB_TOKEN']}"}
          issue_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}"
          issue_response = requests.get(issue_url, headers=headers)
          issue = issue_response.json()
          
          print(f"🤖 Generating code for issue #{issue_number}: {issue['title']}")
          
          # Initialize OpenAI
          client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
          
          # Create specialized prompts based on issue content
          issue_content = f"{issue['title']}\n\n{issue.get('body', '')}"
          
          if 'API' in issue['title'] or 'endpoint' in issue['title'].lower():
              # Backend API generation
              prompt = f"""
              Generate a complete .NET API endpoint for a Garage Inventory System.
              
              **Issue**: {issue_content}
              
              **Architecture**: .NET 9 with Onion Architecture
              - Domain: Entities and interfaces
              - Application: DTOs and service interfaces  
              - Infrastructure: Repository implementations
              - API: Controllers
              
              **Existing Entities**: User, InventoryItem, Location, Category, ItemImage, ItemMovement
              
              Generate:
              1. **Controller** (complete C# file for `src/GarageInventory.API/Controllers/`)
              2. **DTO** (if needed, for `src/GarageInventory.Application/DTOs/`)
              3. **Service Interface** (if needed, for `src/GarageInventory.Application/Interfaces/`)
              4. **Repository Interface** (if needed, for `src/GarageInventory.Domain/Interfaces/`)
              
              Format as JSON:
              {{
                "files": [
                  {{
                    "path": "src/GarageInventory.API/Controllers/ItemSearchController.cs",
                    "content": "// Complete C# controller code here"
                  }}
                ]
              }}
              
              Make it production-ready with proper error handling, validation, and documentation.
              """
          
          elif 'component' in issue['title'].lower() or 'UI' in issue['title']:
              # Frontend component generation
              prompt = f"""
              Generate Angular components for a Garage Inventory System.
              
              **Issue**: {issue_content}
              
              **Architecture**: Angular 20 with standalone components, Angular Material
              **Existing Services**: AuthService, InventoryService
              
              Generate:
              1. **Component TypeScript** (`.ts` file)
              2. **Component Template** (`.html` file)  
              3. **Component Styles** (`.scss` file)
              4. **Service** (if needed)
              
              Format as JSON:
              {{
                "files": [
                  {{
                    "path": "frontend/src/app/inventory/search-input/search-input.ts",
                    "content": "// Complete Angular component code"
                  }}
                ]
              }}
              
              Use Angular Material, reactive forms, and modern Angular patterns.
              """
          
          else:
              # General implementation
              prompt = f"""
              Analyze this issue and generate appropriate code files.
              
              **Issue**: {issue_content}
              
              **Tech Stack**: 
              - Backend: .NET 9 with Onion Architecture
              - Frontend: Angular 20 with standalone components
              - Database: PostgreSQL with Entity Framework Core
              
              Generate the necessary files to implement this feature.
              Format as JSON with files array containing path and content.
              """
          
          # Get AI response
          response = client.chat.completions.create(
              model="gpt-4o",
              messages=[{"role": "user", "content": prompt}],
              max_tokens=4000,
              temperature=0.1
          )
          
          ai_response = response.choices[0].message.content
          
          try:
              # Try to parse as JSON
              if '```json' in ai_response:
                  json_start = ai_response.find('```json') + 7
                  json_end = ai_response.find('```', json_start)
                  json_content = ai_response[json_start:json_end].strip()
              else:
                  json_content = ai_response
              
              files_data = json.loads(json_content)
              
              # Create branch
              branch_name = f"ai-feature-issue-{issue_number}"
              subprocess.run(['git', 'checkout', '-b', branch_name], check=True)
              
              # Create/update files
              files_created = []
              for file_info in files_data.get('files', []):
                  file_path = file_info['path']
                  file_content = file_info['content']
                  
                  # Create directory if needed
                  os.makedirs(os.path.dirname(file_path), exist_ok=True)
                  
                  # Write file
                  with open(file_path, 'w') as f:
                      f.write(file_content)
                  
                  files_created.append(file_path)
                  print(f"✅ Created: {file_path}")
              
              # Commit changes
              subprocess.run(['git', 'add', '.'], check=True)
              subprocess.run(['git', 'commit', '-m', f'AI-generated code for issue #{issue_number}: {issue["title"]}'], check=True)
              subprocess.run(['git', 'push', 'origin', branch_name], check=True)
              
              # Create pull request
              pr_data = {
                  "title": f"AI Implementation: {issue['title']}",
                  "body": f"""🤖 **AI-Generated Implementation**
                  
                  This PR was automatically generated to address issue #{issue_number}.
                  
                  **Files created/modified:**
                  {chr(10).join(f'- `{f}`' for f in files_created)}
                  
                  **Original Issue:**
                  {issue_content}
                  
                  ---
                  *Please review this AI-generated code before merging. Test thoroughly and adapt as needed.*
                  
                  Closes #{issue_number}
                  """,
                  "head": branch_name,
                  "base": "main"
              }
              
              pr_url = f"https://api.github.com/repos/{repo}/pulls"
              pr_response = requests.post(pr_url, headers=headers, json=pr_data)
              
              if pr_response.status_code == 201:
                  pr = pr_response.json()
                  print(f"✅ Pull request created: {pr['html_url']}")
                  
                  # Comment on issue
                  comment_data = {
                      "body": f"🤖 **AI Implementation Complete!**\n\nI've created a pull request with the implementation: {pr['html_url']}\n\nFiles generated:\n" + "\n".join(f"- `{f}`" for f in files_created)
                  }
                  
                  comment_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
                  requests.post(comment_url, headers=headers, json=comment_data)
              else:
                  print(f"❌ Failed to create PR: {pr_response.status_code}")
                  print(pr_response.text)
          
          except Exception as e:
              print(f"❌ Error: {e}")
              print(f"AI Response: {ai_response}")
              
              # Post error comment
              comment_data = {
                  "body": f"🤖 **AI Generation Failed**\n\nSorry, I encountered an error while generating code for this issue:\n\n```\n{str(e)}\n```\n\nPlease try again or implement manually."
              }
              
              comment_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
              requests.post(comment_url, headers=headers, json=comment_data)
          EOF
